Creating models
Description

Objectives
We need to safely store all the vacancies and resumes in a database. Your first task is to develop data models to manage
 the database tables.

Use the default settings of the project with the predefined SQLite database.
Throughout the project, we will need at least two models: Vacancy and Resume. Both of them should have description and
 author fields. The description field is a text field for no more than 1024 symbols and the author field is a foreign
  key linked to the django.contrib.auth.models.User model.

Hint! If you get stuck when creating the author field, check out an example provided in the docs.

Define Vacancy and Resume in the models.py modules in the applications (respectively, vacancy and resume) and migrate
 them to the database.


Main menu
Description
The website is designed for recruitment managers and candidates. A manager can create vacancies and read candidates'
 resumes, while a candidate can create a resume and view vacancies. Both managers and candidates need to be able to
  log in, log out, and see their profile.

To begin with, let's create a main page with a menu.

Objectives
The main page of the service will have a menu with links to all other pages that the user needs: vacancy list, resume
 list, and personal profile. At the top of the page, there should be a greeting message.

Let's look at its design.

The menu should contain an <h2> element at the top:
<h2>Welcome to HyperJob!</h2>
Next, there should be a menu with six links in separate <div> elements:
Login page (href attribute equals "/login");
Logout page (href attribute equals "/logout");
Sign up page (href attribute equals "/signup");
Vacancy list (href attribute equals "/vacancies");
Resume list (href attribute equals "/resumes");
Personal profile (href attribute equals "/home").
If you start the application on your computer with the python manage.py runserver command, the menu page should be
 available at the address localhost:8000.

If you want to use a custom directory for your templates, add its path to the TEMPLATE['DIRS'] list in the settings.py
 module.
To combine a template with the HTTP handler, you can use the django.shortcuts.render function:

render(request, template_name)
You don't need to implement the handlers for these pages yet: you'll do that in the next steps.

Take a moment to think where the relevant files concerning menu should be located in the Django project structure.
Creating a separate Django application is usually a good approach if it is orthogonal to everything else and
 is potentially reusable.


Vacancy and resume pages


Objectives
Your task is to create the pages with vacancies and resumes shown as lists of entries without any sorting.
You can add any additional information on the page, but each list entry should at least meet the following criteria:

Each resume or vacancy should be in a separate <div> element.
The text in each element should be input as follows: "<author>: <description>", where <author> is the username field
 of the User model.
Example: <div>Pierre: Product Designer</div>
If you start the application on your computer with the python manage.py runserver command, the vacancy list should
 be available at the address localhost:8000/vacancies and the resume list should be at localhost:8000/resumes.

To combine a template with the HTTP handler you can use the django.shortcuts.render function. To pass any arguments
 to the template, add the dictionary to the render function:

render(request, template_name, {'name_you_are_using_in_template': your_variable})
Tests for your project will be run on a prepared database, so you do not need to worry about the amount of data
in yours.
In case you want to run your application for testing purposes and see some resumes and vacancies on the relevant
pages, you can use Resume.objects.create or Vacancy.objects.create to add some data.


Objectives
Your task is to implement authentication on the website. You need to create three pages: one for new users to sign up
 and create their accounts, another to log in with their username and password, and the last one to log out.
  For logging out, users do not need to send any information, so they should just go to the right URL.

Please use django.contrib.auth.forms.UserCreationForm for your signup handler,
django.contrib.auth.forms.AuthenticationForm or django.contrib.auth.views.LoginView for the login handler, and
 django.contrib.auth.views.LogoutView for logout.

If the login request is successful, redirect the user to the menu page.

If you start the application on your computer with the python manage.py runserver command, the signup page should be
 available at the address localhost:8000/signup , the login page should be at localhost:8000/login, and the logout
  at localhost:8000/logout.

Please pay attention that the URLs do not have a slash at the end, so your URL patterns should not have it either.
 You can redirect GET requests to the right page with the help of RedirectView if you need to:

Creating new vacancies and resumes
Objectives
Your task is to make a new page with two handlers: one for creating vacancies and another for creating resumes.
 Only HyperJob managers can create vacancies, and only registered users can create resumes.
 When a new item is created, it should appear on the appropriate resume or vacancy page.

How can we distinguish managers from job hunters? To do that, you can use the boolean field is_staff
 in django.contrib.auth.models.User. If it's true, the user is a manager; otherwise, they are a candidate.
  Unauthenticated users are not allowed to create either vacancies or resumes. To check if a user is authenticated,
   you can use the request.user.is_authenticated property in your handler.

Create a profile page at localhost:8000/home. What is available on the profile page depends on who
 is logged in⁠—a candidate should see a form to submit their resume, a manager⁠—a form to submit a vacancy.
  Anonymous users should not be able to submit anything, therefore there should be no form there.
   You can use an HTML form or define one with Django forms. The main requirement is that the handlers should
    receive only one POST parameter: description. That's enough to create a new item.

If the request is successful, redirect the user back to their profile; otherwise, respond with a
403 (Forbidden) status code.

If you start the application on your computer with the python manage.py runserver command, the profile page should
 be available at localhost:8000/home, a new resume can be created at localhost:8000/resume/new, and a new vacancy
  at localhost:8000/vacancy/new.

Do not forget to use POST handlers for the creation of resumes and vacancies. There's no need to create GET handlers
 neither for localhost:8000/resume/new nor for localhost:8000/vacancy/new.
HINT! If you want to check the implementation and emulate having a user who is a manager and a candidate,
 use the command python manage.py createsuperuser. For superuser, fields is_staff will be true while for ordinary
  user created via signup is_staff is false.